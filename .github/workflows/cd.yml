---
name: CD

# yamllint disable-line rule:truthy
on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag"
        required: true
        type: string
      os:
        description: "Target platform"
        required: true
        type: choice
        options:
          - all
          - linux
          - macos
          - windows
          - web

permissions:
  contents: write

env:
  # Unnecessary for CI and just pollutes cache
  CARGO_INCREMENTAL: 0
  # Remove debug symbols, substantially reduces cache size
  CARGO_PROFILE_DEV_DEBUG: 0
  CARGO_PROFILE_TEST_DEBUG: 0
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build-linux:
    name: Build Linux Artifacts (${{ matrix.target }})
    if: >
      ((startsWith(github.event.release.name, 'tetanes')
        && !startsWith(github.event.release.name, 'tetanes-core'))
      || inputs.tag)
      && (!inputs.os || inputs.os == 'linux')
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
          # TODO: aarch64 linux having trouble with docker in CI
          # - target: aarch64-unknown-linux-gnu
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
      - uses: baptiste0928/cargo-install@v3
        with:
          crate: cross
          git: https://github.com/cross-rs/cross
          commit: 19be834
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-make,cargo-deb
      - run: |
          sudo apt update
          sudo apt install -y libudev-dev libasound2-dev libssl-dev libfuse2
      - if: startsWith(matrix.target, 'x86_64')
        run: |
          time cargo make build-artifacts -- --target ${{ matrix.target }}
      # aarch64 requires cross building
      - if: startsWith(matrix.target, 'aarch64')
        run: |
          export CROSS_CONTAINER_IN_CONTAINER=true
          time cargo make build-artifacts -- --target ${{ matrix.target }} --cross
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-artifacts
          path: tetanes/dist/
  build-macos:
    name: Build macOS Artifacts (${{ matrix.target }})
    if: >
      ((startsWith(github.event.release.name, 'tetanes')
        && !startsWith(github.event.release.name, 'tetanes-core'))
      || inputs.tag)
      && (!inputs.os || inputs.os == 'macos')
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-apple-darwin
          - target: aarch64-apple-darwin
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-make
      - run: |
          time cargo make build-artifacts -- --target ${{ matrix.target }}
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-artifacts
          path: tetanes/dist/
  build-windows:
    name: Build Windows Artifacts (${{ matrix.target }})
    if: >
      ((startsWith(github.event.release.name, 'tetanes')
        && !startsWith(github.event.release.name, 'tetanes-core'))
      || inputs.tag)
      && (!inputs.os || inputs.os == 'windows')
    runs-on: windows-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
          # TODO: windows aarch64
          # - target: aarch64-pc-windows-msvc
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: ${{ matrix.target }}
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-make,cargo-wix
      - if: startsWith(matrix.target, 'x86_64')
        run: |
          time cargo make build-artifacts -- --target ${{ matrix.target }}
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}-artifacts
          path: tetanes/dist/
  build-web:
    name: Build Web Artifacts (wasm32-unknown-unknown)
    if: >
      ((startsWith(github.event.release.name, 'tetanes')
        && !startsWith(github.event.release.name, 'tetanes-core'))
      || inputs.tag)
      && (!inputs.os || inputs.os == 'web')
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: nightly
      - uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: wasm32-unknown-unknown
      - uses: taiki-e/install-action@v2
        with:
          tool: cargo-make,trunk
      - run: |
          time cargo make build-artifacts -- --target wasm32-unknown-unknown
      - uses: actions/upload-artifact@v4
        with:
          name: wasm32-unknown-unknown-artifacts
          path: tetanes/dist/
  upload-artifacts:
    name: Upload Artifacts
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows, build-web]
    if: |
      always() && contains(needs.*.result, 'success')
    steps:
      - uses: actions/download-artifact@v5
        with:
          path: artifacts
          merge-multiple: true
      - env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release upload ${{ github.event.release.tag_name || inputs.tag }} artifacts/**/* --clobber
  update-homebrew-formula:
    name: Update Homebrew Formula
    needs: build-macos
    runs-on: ubuntu-latest
    env:
      RELEASE_TAG: ${{ github.event.release.tag_name || inputs.tag }}
    steps:
      - uses: actions/checkout@v5
        with:
          repository: "lukexor/homebrew-formulae"
          token: ${{ secrets.REPOS }}
      - id: commit
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release -R lukexor/tetanes download $RELEASE_TAG --pattern '*-apple-darwin.tar.gz*'
          x86_64_SHA=$(cat *x86_64*txt | awk '{ print $1 }')
          aarch64_SHA=$(cat *aarch64*txt | awk '{ print $1 }')
          VERSION=${RELEASE_TAG#"tetanes-v"}
          cat tetanes.rb.tmpl | \
            sed "s/%VERSION%/${VERSION}/g" | \
            sed "s/%x86_64_SHA%/${x86_64_SHA}/g" | \
            sed "s/%aarch64_SHA%/${aarch64_SHA}/g" \
            > Casks/tetanes.rb
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          file_pattern: "*.rb"
          commit_message: Version Bump v${{ steps.commit.outputs.version }}
